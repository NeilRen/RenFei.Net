<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.renfei.dao.persistences.FullTextIndexMapper">
    <resultMap id="BaseResultMap" type="net.renfei.dao.entity.FullTextIndexDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="category_id" jdbcType="BIGINT" property="categoryID"/>
        <result column="type_id" jdbcType="BIGINT" property="typeID"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="en_name" jdbcType="VARCHAR" property="enName"/>
        <result column="zh_name" jdbcType="VARCHAR" property="zhName"/>
        <result column="uri_path" jdbcType="VARCHAR" property="uriPath"/>
        <result column="release_time" jdbcType="TIMESTAMP" property="releaseTime"/>
    </resultMap>
    <select id="selectByWord" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
            T1.*,
            t_category.type_id,
            t_category.en_name,
            t_category.zh_name,
            t_type.type_name,
            t_type.uri_path
        FROM
            (
                SELECT
                    id,
                    title,
                    category_id,
                    content,
                    release_time,
                    is_delete,
                    MATCH (
                    title,
                    content )
                    AGAINST (
                    #{word,jdbcType=LONGVARCHAR}
                    IN
                    NATURAL
                    LANGUAGE
                    MODE ) AS
                    score
                FROM
                    t_posts
                UNION ALL
                SELECT
                    id,
                    title,
                    category_id,
                    content,
                    release_time,
                    is_delete,
                    MATCH (
                    title,
                    content )
                    AGAINST (
                    #{word,jdbcType=LONGVARCHAR}
                    IN
                    NATURAL
                    LANGUAGE
                    MODE ) AS
                    score
                FROM
                    t_page
                UNION ALL
                SELECT
                    id,
                    title,
                    category_id,
                    describes AS
                    content,
                    release_time,
                    is_delete,
                    MATCH (
                    title,
                    describes )
                    AGAINST (
                    #{word,jdbcType=LONGVARCHAR}
                    IN
                    NATURAL
                    LANGUAGE
                    MODE ) AS
                    score
                FROM
                    t_photo
                UNION ALL
                SELECT
                    id,
                    title,
                    category_id,
                    describes AS
                    content,
                    release_time,
                    is_delete,
                    MATCH (
                    title,
                    describes )
                    AGAINST (
                    #{word,jdbcType=LONGVARCHAR}
                    IN
                    NATURAL
                    LANGUAGE
                    MODE ) AS
                    score
                FROM
                    t_video
            ) T1
                LEFT JOIN t_category ON T1.category_id = t_category.id
                LEFT JOIN t_type ON t_category.type_id = t_type.id
        WHERE is_delete = 0
          AND release_time <![CDATA[<]]> now()
        ORDER BY
            T1.score DESC
    </select>
</mapper>